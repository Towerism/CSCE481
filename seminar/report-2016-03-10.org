#+TITLE: Seminar Report 12
#+AUTHOR: Martin Fracker
#+OPTIONS: toc:nil num:nil
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
* Summary
This seminar was given by both National Instruments and Improving
Enterprises. National Instruments brought representatives to talk about their
transition from college to employment and Improving Enterprises spoke about its
business with respect to its culture, policy, and software workflow.

One speaker from National Instruments wanted to emphasize that there tends
to be several careers paths in any given company. When he was in college, he
cared only about making money after college and being in close proximity to his
family. Beyond these shallow considerations when pursuing a job, he wanted to
stand out. In other words, he wanted to leverage what his passion was and what
he enjoyed doing. Ten years later, he realized that even though he chose
National Instruments without much substance, National Instruments has been
leveraging what he enjoys doing.

Improving believes in life-long learning and highly values trust and building
trust not only with its clients but also with its employees. Improving
enterprises prefers to have working code over working documentation. This is
because documentation often becomes obsolete rather quickly in the software
industry. To offset a lack of documentation, Improving elects to work using
Agile methodologies which allows them to work closely with the customer and to
be able to react quickly to ever-changing specifications.
* Thoughts
I have never been a fan of writing documentation myself. I enjoy having the
opportunity to read documentation someone else wrote, but writing one's own
documentation often involves the maintenance of said documentation otherwise one
defeats the purpose of writing documentation in the first place as the software
described therein is no doubt going to change significantly in the future. In
agile methodologies (in my case I prefer TDD) working code is prioritized over
documentation.

How then do you document code to be checked in? I would argue that the tests
everyone should be checking in with their code would act as the documentation of
the code that the tests exercise. Tests have an advantage over traditional
documentation. That is tests tend to be tightly coupled to the code they test,
much more so than traditional documentation. In other words, if the code changes
in a way that visibly modifies behavior, then so will the tests.
