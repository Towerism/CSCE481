#+TITLE: Long Assignment 2
#+AUTHOR: Martin Fracker
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \bibliographystyle{alphadin}
#+LATEX_HEADER: \input{titlepage}

* Ruby Args
Ruby Args cite:argsgit is a small library written by Bob Martin to complement
the java version of the same library which he used in his book /Clean Code: A
Handbook of Agile Software Craftsmanship/ cite:cleancode.
** Project Structure
The Ruby Args project consists of the three source files: =args_spec.rb=,
=Main.rb=, and =args.rb=.
*** =args_spec.rb=
Bob Martin describes the business logic of Ruby Args in this file. Bob Martin
wrote the java version of this program using test-driven development
cite:cleancode, and this file suggests that he would have used test-driven
development for this project as well.
*** =Main.rb=
This file is mostly superfluous because =args_spec.rb= already does a fine job
at explaining how the library works and how to use it. Nonetheless, this file
demonstrates a main function that can parse CLI (command line interface)
arguments and print the parsed arguments for the user.
*** =args.rb=
This file contains the entire argument parsing library as written by Bob
Martin. It contains a single =Args= class which contains the nested classes:
=Parser=, =BoolMarshaler=, =NumberMarshaler=, and =NumberListMarshaler=. The
rest of this document will focus mostly on =args.rb=.

** Library Explanation
Ruby Args parses CLI arguments passed in at invocation given a specification of
expected arguments and argument types.
*** Usage
An instance of the =Parser= class is returned by the static method
=Args.expect=. =Args.expect= should be called with a proc block declaring the
types and names of the expected arguments.
#+BEGIN_SRC ruby
  parser = Args.expect do
    boolean "v,s"
    number "t"
    string "f"
  end
#+END_SRC

Given an instance of the =Parser= class, the user can simply call the =parse=
method in order to parse the CLI arguments. Then the user can access the value
of each argument using the =[]= operator and the argument's name as a key.
#+BEGIN_SRC ruby
  parser.parse(ARGV)

  verbose = parser["v"]
  shorthand = parser["s"]
  times = parser["t"]
  file = parser["f"]
#+END_SRC

If, for whatever reason, there was an unexpected argument, then the method
=valid?= will return false after having called =parse=.
#+BEGIN_SRC ruby
  if not parser.valid?
    puts = "Usage: <Program> [v] [s] [t <times>] [f <file>]"
  end
#+END_SRC

*** I/O Specification
As previously said, Bob Martin most likely wrote this library using test-driven
development. This section will describe the business logic of the library in
more detail.

**** =Args#expect=
The user calls this function to specify what arguments the parser
should expect.
***** Input
The user should pass in a proc block containing several statements each
declaring several argument names which will be of one particular type (boolean,
numeric, string, or numeric list). An example of such a statement is 
#+BEGIN_SRC ruby
  ~boolean "v,s"~
#+END_SRC
which would declare two arguments, =w= and =s=, each of type boolean.
***** Output
A parser expecting the declared arguments will be returned.

**** =Parser#parse=
Parses a string according to the expected arguments.
***** Input
The user should pass in a string containing the arguments passed in at program
invocation. That is each argument name should start with a dash. The values
associated with each argument should follow the argument's name plus a space. 



bibliography:references.bib
